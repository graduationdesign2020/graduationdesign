{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxNullishCoalescingOperator = _interopRequireDefault(require(\"@babel/plugin-syntax-nullish-coalescing-operator\"));\n\nvar _core = require(\"@babel/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils.declare)((api, {\n  loose = false\n}) => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-nullish-coalescing-operator\",\n    inherits: _pluginSyntaxNullishCoalescingOperator.default,\n    visitor: {\n      LogicalExpression(path) {\n        const {\n          node,\n          scope\n        } = path;\n\n        if (node.operator !== \"??\") {\n          return;\n        }\n\n        let ref = scope.maybeGenerateMemoised(node.left);\n        let assignment;\n\n        if (ref === null) {\n          ref = node.left;\n          assignment = _core.types.cloneNode(node.left);\n        } else {\n          assignment = _core.types.assignmentExpression(\"=\", ref, node.left);\n        }\n\n        path.replaceWith(_core.types.conditionalExpression(loose ? _core.types.binaryExpression(\"!=\", assignment, _core.types.nullLiteral()) : _core.types.logicalExpression(\"&&\", _core.types.binaryExpression(\"!==\", assignment, _core.types.nullLiteral()), _core.types.binaryExpression(\"!==\", _core.types.cloneNode(ref), scope.buildUndefinedNode())), _core.types.cloneNode(ref), node.right));\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}