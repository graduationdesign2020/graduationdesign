{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction getObjRef(node, nodes, file, scope) {\n  let ref;\n\n  if (t.isSuper(node)) {\n    return node;\n  } else if (t.isIdentifier(node)) {\n    if (scope.hasBinding(node.name)) {\n      return node;\n    } else {\n      ref = node;\n    }\n  } else if (t.isMemberExpression(node)) {\n    ref = node.object;\n\n    if (t.isSuper(ref) || t.isIdentifier(ref) && scope.hasBinding(ref.name)) {\n      return ref;\n    }\n  } else {\n    throw new Error(`We can't explode this node type ${node.type}`);\n  }\n\n  const temp = scope.generateUidIdentifierBasedOnNode(ref);\n  scope.push({\n    id: temp\n  });\n  nodes.push(t.assignmentExpression(\"=\", t.cloneNode(temp), t.cloneNode(ref)));\n  return temp;\n}\n\nfunction getPropRef(node, nodes, file, scope) {\n  const prop = node.property;\n  const key = t.toComputedKey(node, prop);\n  if (t.isLiteral(key) && t.isPureish(key)) return key;\n  const temp = scope.generateUidIdentifierBasedOnNode(prop);\n  scope.push({\n    id: temp\n  });\n  nodes.push(t.assignmentExpression(\"=\", t.cloneNode(temp), t.cloneNode(prop)));\n  return temp;\n}\n\nfunction _default(node, nodes, file, scope, allowedSingleIdent) {\n  let obj;\n\n  if (t.isIdentifier(node) && allowedSingleIdent) {\n    obj = node;\n  } else {\n    obj = getObjRef(node, nodes, file, scope);\n  }\n\n  let ref, uid;\n\n  if (t.isIdentifier(node)) {\n    ref = t.cloneNode(node);\n    uid = obj;\n  } else {\n    const prop = getPropRef(node, nodes, file, scope);\n    const computed = node.computed || t.isLiteral(prop);\n    uid = t.memberExpression(t.cloneNode(obj), t.cloneNode(prop), computed);\n    ref = t.memberExpression(t.cloneNode(obj), t.cloneNode(prop), computed);\n  }\n\n  return {\n    uid: uid,\n    ref: ref\n  };\n}"]}